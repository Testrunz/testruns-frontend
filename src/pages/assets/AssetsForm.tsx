import React from "react";
import Confirmationpopup from "../../components/ConfirmationPopup";
import Successpopup from "../../components/SuccessPopup";
import Dialog from "@mui/material/Dialog";
import {
  Box,
  Button,
  FormControl,
  Grid,
  MenuItem,
  Select,
  TextField,
  Typography,
} from "@mui/material";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import ExpandMoreOutlinedIcon from "@mui/icons-material/ExpandMoreOutlined";
import CloseIcon from "@mui/icons-material/Close";
import "../../assets/styles/asset-popup.scss";
import assetimg from "../../assets/images/assetimg.svg";
import darkcircle from "../../assets/images/darkgary-circle.svg";
import lightcircle from "../../assets/images/lightgary-circle.svg";
import Timeline from "@mui/lab/Timeline";
import TimelineItem from "@mui/lab/TimelineItem";
import TimelineSeparator from "@mui/lab/TimelineSeparator";
import TimelineConnector from "@mui/lab/TimelineConnector";
import TimelineContent from "@mui/lab/TimelineContent";
import TimelineDot from "@mui/lab/TimelineDot";
import { Organization } from "../../modals";
import { OrganizationList } from "../../utils/data";

const Addnewpopup =  React.forwardRef(({ open, close ,closeFormPopup, openConfirmationPopup, submitFormPopup }: any,ref) => {
  const [openDlg2Dialog, setDialog2Open] = React.useState(false);
  const [openSuccess, setSuccessOpen] = React.useState(false);
  const [answers, setAnswers] = React.useState("");
  const [formPopup, setFormPopup] = React.useState(false);
  const [organizations, setOrganizations] =
    React.useState<Organization[]>(OrganizationList);

  const Placeholder = ({ children }: any) => {
    return <div>{children}</div>;
  };
  const handleAddButtonClick = () => {
    setSuccessOpen(true);
    closeFormPopup(false)
    setTimeout(() => {
      setSuccessOpen(false);
    }, 2000);
  };
  const handleConfirmationYes = () => {
    setDialog2Open(false);
    closeFormPopup(false)
  };

  React.useImperativeHandle(ref, () => ({
    open(state: any) {
      setFormPopup(state);
    },
  }));

  return (
    <div>
      {/* <Confirmationpopup
        open={openDlg2Dialog}
        close={() => setDialog2Open(false)}
        handleConfirmationYes={handleConfirmationYes}
      />
      <Successpopup
        open={openSuccess}
        type={"Assest"}
        close={() => setSuccessOpen(false)}
      /> */}
      <Dialog
        open={formPopup}
        keepMounted
        onClose={()=>closeFormPopup(false)}
        aria-labelledby="add-new-asset-title"
        aria-describedby="add-new-asset"
        fullWidth
        maxWidth="md"
        className="popup-outer"
      >
        <Box className="popup-section">
          <Box className="title-popup">
            <Typography>Add new asset</Typography>
            <CloseIcon onClick={()=>closeFormPopup(false)} />
          </Box>
          <Grid container spacing={2} sx={{ width: "100%", m: 0 }}>
            <Grid
              item
              xs={12}
              sm={12}
              md={5}
              lg={4}
              sx={{
                padding: "0px !important",
                paddingRight: { xs: "0px !important", md: "30px !important" },
              }}
            >
              <Box>
                <Box className="asset-upload">
                  <img src={assetimg} alt="assetimg" />
                </Box>
                <Box
                  className="edit-profile-btn"
                  sx={{ mt: 3, mb: 3, pb: "0px !important" }}
                >
                  <Button>Upload photo</Button>
                </Box>
                <Box className="asset-id">
                  <label>Asset Id (autogenerated)</label>
                  <TextField
                    margin="normal"
                    required
                    fullWidth
                    id="Email"
                    name="Email"
                    autoComplete="Email"
                    autoFocus
                    InputLabelProps={{ shrink: false }}
                    placeholder="Asset Id"
                  />
                </Box>
                <Box>
                  <Typography className="recent-use">Recently used</Typography>
                  <Box className="data-detail">
                    <img src={darkcircle} alt="darkcircle" />
                    <Typography>no data found</Typography>
                  </Box>
                  <Timeline className="asset-timeline">
                    <TimelineItem>
                      <TimelineSeparator>
                        <TimelineDot>
                          <img src={darkcircle} alt="darkcircle" />
                        </TimelineDot>
                        <TimelineConnector />
                      </TimelineSeparator>
                      <TimelineContent className="timeline-content">
                        <Typography>Date:22/05/2023</Typography>
                        <Typography>Dept-Computer science</Typography>
                        <Typography>Dept-Computer science</Typography>
                      </TimelineContent>
                    </TimelineItem>
                    <TimelineItem>
                      <TimelineSeparator>
                        <TimelineDot>
                          <img src={lightcircle} alt="lightcircle" />
                        </TimelineDot>
                        <TimelineConnector />
                      </TimelineSeparator>
                      <TimelineContent className="timeline-content">
                        <Typography>Date:22/05/2023</Typography>
                        <Typography>Dept-Computer science</Typography>
                        <Typography>Dept-Computer science</Typography>
                      </TimelineContent>
                    </TimelineItem>
                    <TimelineItem>
                      <TimelineSeparator>
                        <TimelineDot>
                          <img src={lightcircle} alt="lightcircle" />
                        </TimelineDot>
                      </TimelineSeparator>
                      <TimelineContent>
                        <Box className="edit-profile-btn view-more">
                          <Button>View more</Button>
                        </Box>
                      </TimelineContent>
                    </TimelineItem>
                  </Timeline>
                </Box>
              </Box>
            </Grid>
            <Grid
              item
              xs={12}
              sm={12}
              md={7}
              lg={8}
              sx={{
                padding: "0px !important",
                paddingTop: { xs: "30px !important", md: "0px !important" },
              }}
            >
              <Box>
                <Grid container spacing={2} className="asset-popup">
                  <Grid item xs={12} sm={12} md={12} lg={12}>
                    <Box>
                      <label>Name</label>
                      <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="name"
                        name="name"
                        autoComplete="name"
                        autoFocus
                        InputLabelProps={{ shrink: false }}
                        placeholder="Assets name"
                      />
                    </Box>
                  </Grid>
                </Grid>
                <Grid
                  container
                  spacing={2}
                  className="asset-popup calender-sec"
                >
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    md={6}
                    lg={6}
                    sx={{ paddingRight: { sm: "1rem !important" } }}
                  >
                    <Box>
                      <label>Purchase date</label>
                      <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker format="DD/MM/YYYY" />
                      </LocalizationProvider>
                    </Box>
                  </Grid>
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    md={6}
                    lg={6}
                    sx={{
                      paddingLeft: { sm: "1rem !important" },
                      paddingTop: {
                        xs: "0rem !important",
                        sm: "1rem !important",
                      },
                    }}
                  >
                    <Box>
                      <label>Guaranty/warranty/expiry date</label>
                      <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker format="DD/MM/YYYY" />
                      </LocalizationProvider>
                    </Box>
                  </Grid>
                </Grid>
                <Grid container spacing={2} className="asset-popup">
                  <Grid item xs={12} sm={12} md={12} lg={12}>
                    <Box>
                      <label style={{ display: "block" }}>Organisation</label>
                      <FormControl sx={{ width: "100%" }}>
                        <Select
                          labelId="tselect-popup-label"
                          id="select-popup"
                          value={answers}
                          displayEmpty
                          IconComponent={ExpandMoreOutlinedIcon}
                          onChange={(event) => setAnswers(event.target.value)}
                          renderValue={
                            answers !== ""
                              ? undefined
                              : () => <Placeholder>Organisation</Placeholder>
                          }
                        >
                          {organizations.map((item, index) => (
                            <MenuItem value={item.id} key={index}>
                              {item.name}
                            </MenuItem>
                          ))}
                          {/* <MenuItem value={"1"}>1</MenuItem>
                          <MenuItem value={"2"}>2</MenuItem>
                          <MenuItem value={"3"}>3</MenuItem> */}
                        </Select>
                      </FormControl>
                    </Box>
                  </Grid>
                </Grid>
                <Grid container spacing={2} className="asset-popup">
                  <Grid item xs={12} sm={12} md={12} lg={12}>
                    <Box>
                      <label style={{ display: "block" }}>Department/s</label>
                      <FormControl sx={{ width: "100%" }}>
                        <Select
                          labelId="tselect-popup-label"
                          id="select-popup"
                          value={answers}
                          displayEmpty
                          IconComponent={ExpandMoreOutlinedIcon}
                          onChange={(event) => setAnswers(event.target.value)}
                          renderValue={
                            answers !== ""
                              ? undefined
                              : () => (
                                  <Placeholder>Select department</Placeholder>
                                )
                          }
                        >
                          <MenuItem value={"1"}>1</MenuItem>
                          <MenuItem value={"2"}>2</MenuItem>
                          <MenuItem value={"3"}>3</MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </Grid>
                </Grid>
                <Grid container spacing={2} className="asset-popup">
                  <Grid item xs={12} sm={12} md={12} lg={12}>
                    <Box>
                      <label style={{ display: "block" }}>Laboratory/ies</label>
                      <FormControl sx={{ width: "100%" }}>
                        <Select
                          labelId="tselect-popup-label"
                          id="select-popup"
                          value={answers}
                          displayEmpty
                          IconComponent={ExpandMoreOutlinedIcon}
                          onChange={(event) => setAnswers(event.target.value)}
                          renderValue={
                            answers !== ""
                              ? undefined
                              : () => <Placeholder>Select lab</Placeholder>
                          }
                        >
                          <MenuItem value={"1"}>1</MenuItem>
                          <MenuItem value={"2"}>2</MenuItem>
                          <MenuItem value={"3"}>3</MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </Grid>
                </Grid>
                <Grid container spacing={2} className="asset-popup">
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    md={6}
                    lg={6}
                    sx={{ paddingRight: { sm: "1rem !important" } }}
                  >
                    <Box>
                      <label style={{ display: "block" }}>Status</label>
                      <FormControl sx={{ width: "100%" }}>
                        <Select
                          labelId="tselect-popup-label"
                          id="select-popup"
                          value={answers}
                          displayEmpty
                          IconComponent={ExpandMoreOutlinedIcon}
                          onChange={(event) => setAnswers(event.target.value)}
                          renderValue={
                            answers !== ""
                              ? undefined
                              : () => <Placeholder>Select status</Placeholder>
                          }
                        >
                          <MenuItem value={"1"}>1</MenuItem>
                          <MenuItem value={"2"}>2</MenuItem>
                          <MenuItem value={"3"}>3</MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </Grid>
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    md={6}
                    lg={6}
                    sx={{
                      paddingLeft: { sm: "1rem !important" },
                      paddingTop: {
                        xs: "0rem !important",
                        sm: "1rem !important",
                      },
                    }}
                  >
                    <Box>
                      <label style={{ display: "block" }}>Availability</label>
                      <FormControl sx={{ width: "100%" }}>
                        <Select
                          labelId="tselect-popup-label"
                          id="select-popup"
                          value={answers}
                          displayEmpty
                          IconComponent={ExpandMoreOutlinedIcon}
                          onChange={(event) => setAnswers(event.target.value)}
                          renderValue={
                            answers !== ""
                              ? undefined
                              : () => (
                                  <Placeholder>Select availability</Placeholder>
                                )
                          }
                        >
                          <MenuItem value={"1"}>1</MenuItem>
                          <MenuItem value={"2"}>2</MenuItem>
                          <MenuItem value={"3"}>3</MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
          <Box
            sx={{
              display: { xs: "block", sm: "flex" },
              justifyContent: "flex-end",
              mt: 3,
            }}
          >
            <Button
              type="submit"
              variant="contained"
              onClick={() => {
                openConfirmationPopup(true);
              }}
              className="cancel-btn"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="contained"
              onClick={submitFormPopup}
              className="add-btn"
            >
              Add
            </Button>
          </Box>
        </Box>
      </Dialog>
    </div>
  );
}
)
export default Addnewpopup;
